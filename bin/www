#!/usr/bin/env node

/**
 * Module dependencies.
 */

var Server = require("../app");
var debug = require("debug")("eagle:server");
var http = require("http");
const { userQueries } = require("../requests/UserQueries");
const { employeQueries } = require("../requests/EmployeQueries");
const { categorieQueries } = require("../requests/categorieQueries");
const { fournisseurQueries } = require("../requests/fournisseurQueries");
const { produitQueries } = require("../requests/produitQueries");
const { venteQueries } = require("../requests/venteQueries");
const { paiementQueries } = require("../requests/paiementQueries");
const User = require("../models/user.model");
const Setting = require("../models/settings.model");
const dotenv = require("dotenv").config();
var bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const swaggerUi = require("swagger-ui-express"),
  swaggerDocument = require("../swagger.json");

const FileUpload = require("../utils/fileupload");

const {dbConnection} = require("../settings/database");
const { all } = require("../routes/index");
const { uploadFile } = require("../utils/uploadFile");

/**
 * Get port from environment and store in Express.
 */
const Serveur = new Server();
const app = Serveur.getApp();
var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDocument));

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// const io = require("socket.io").listen(server, {
//   maxHttpBufferSize: 1e8,
// });
const io = require("socket.io")(server, {
  maxHttpBufferSize: 1e8,
});

app.io = io;
/**
 * Listen on provided port, on all network interfaces.
 */
dbConnection();

const SaveUSer = io.of("/inscription").use(Serveur.getSharedSession());

SaveUSer.on("connection", (socket) => {
  socket.on("setUser", async (data) => {
    const Result = await userQueries.setUser(data);
    if (Result.etat == false) {
      socket.emit("bad");
    } else {
      if (Result !== null) {
        const token = jwt.sign(
          { user_id: Result._id, isAdmin: Result.isAdmin },
          process.env.SECRET
        );

        Result.token = token;
        socket.handshake.session.user = {
          id: Result.result._id,
          username: Result.result.username,
          nom_etablissement: Result.result.nom_etablissement,
          isAdmin: Result.result.isAdmin,
          ...Result.result._doc,
        };
        socket.handshake.session.save();
        console.log(socket.handshake.session);
        console.log({ token: token });
        socket.emit("saved");

        socket.emit("redirect", "/config_profil");
      }
    }
  });
});
//connexion admin
const UserLogin = io.of("/connexion").use(Serveur.getSharedSession());
UserLogin.on("connection", (socket) => {
  try {
    socket.on("login", async (data) => {
      const { emailOrPhoneNumber, password } = data;
      //console.log(emailOrPhoneNumber, password, 'data');

      const userlogin = await User.findOne({
        $or: [{ email: emailOrPhoneNumber }, { numero: emailOrPhoneNumber }],
      });
      //console.log(userlogin, 'userlogin');

      if (userlogin && (await bcrypt.compare(password, userlogin.password))) {
        const token = jwt.sign(
          {
            user_id: userlogin._id,
            emailOrPhoneNumber,
            isAdmin: userlogin.isAdmin,
          },
          process.env.SECRET
        );

        userlogin.token = token;

        socket.handshake.session.user = {
          id: userlogin._id,
          username: userlogin.username,
          nom_etablissement: userlogin.nom_etablissement,
          isAdmin: userlogin.isAdmin,
          ...userlogin._doc,
          token,
        };
       
        
        socket.handshake.session.save();
        socket.emit("loginsuccess", "/dashboard");
      } else {
        socket.emit("bad");
      }
    });
  } catch (e) {
    console.log(e);
  }
});

const SaveEmploye = io.of("/ajouteruser").use(Serveur.getSharedSession());
SaveEmploye.on("connection", (socket) => {
  socket.on("setemploye", async (data) => {
    console.log(data);
    const Result = await employeQueries.setEmploye(data);
    console.log(Result);
    if (Result) {
      socket.emit("saved");
    } else {
      socket.emit("bad");
    }
  });
});

const updateEmploye = io.of("/edituser").use(Serveur.getSharedSession());

updateEmploye.on("connection", (socket) => {
  socket.on("updateEmploye", async (data) => {
    const Result = await employeQueries.updateEmploye(data.userId, data.data);
    console.log("ğŸ‘‰ ğŸ‘‰ ğŸ‘‰  ~ file: www:126 ~ Result", Result);
    if (Result.etat) {
      socket.emit("saved", {
        update: true,
      });
    } else {
      socket.emit("bad");
    }
  });
});

const SaveCategorie = io
  .of("/ajoutercategorie")
  .use(Serveur.getSharedSession());
SaveCategorie.on("connection", (socket) => {
  socket.on("setcategorie", async (data) => {
    if (data.image) {
      const result = await uploadFile(data.image, data.nom.replace(/ /gi, "_"));
      data.image = result.Location;
    }

    const Result = await categorieQueries.setCategorie(data);
    if (Result.result !== null) {
      socket.emit("saved");
    } else {
      socket.emit("bad");
    }
  });
});

io.of("/modifiercategorie")
  .use(Serveur.getSharedSession())
  .on("connection", (socket) => {
    socket.on("updatecategorie", async (data, id) => {
      const cat = await categorieQueries.getCategorieById(id);

      if (cat.result) {
        if (data.image && data.image !== cat.result.image) {
          const result = await uploadFile(
            data.image,
            data.nom.replace(/ /gi, "_")
          );

          data.image = result.Location;
        } else {
          data.image = cat.result.image;
        }

        const Result = await categorieQueries.updateCategorie(id, data);
        if (Result.result !== null) {
          socket.emit("saved");
        } else {
          socket.emit("bad");
        }
      } else {
        socket.emit("bad");
      }
    });
  });

const SaveFournisseur = io.of("/fournisseur").use(Serveur.getSharedSession());
SaveFournisseur.on("connection", (socket) => {
  socket.on("setfournisseur", async (data) => {
    const Result = await fournisseurQueries.setFournisseur(data);
    console.log(Result);
    if (Result.result !== null) {
      socket.emit("saved");
    } else {
      socket.emit("bad");
    }
  });
});

const Summary = io.of("/summary").use(Serveur.getSharedSession());
Summary.on("connection", (socket) => {
  socket.on("selected_month_year", async (data) => {
    const moment = require("moment");
    console.log(data.date + "-01");
    const startOfMonth = moment(data.date + "-01").startOf("month");
    const Result = await venteQueries.getVentes({
      travail_pour: data._id,
      createdAt: { $gte: startOfMonth.toDate() },
    });
    console.log(Result);

    if (Result) {
      const beneficeParBouteille = 5;
      let totalPrix = 0;
      const bouteillesVendues = {};
      const semaineVentes = {
        semaine1: 0,
        semaine2: 0,
        semaine3: 0,
        semaine4: 0,
      };
      const semaineBenefice = {
        semaine1: 0,
        semaine2: 0,
        semaine3: 0,
        semaine4: 0,
      };
      let totalBenefice = 0;

      Result.result.forEach((vente) => {
        // Calculer le prix total de la vente
        const prixTotal = vente.prix;
        totalPrix += prixTotal;

        vente.produit.forEach((produit, i) => {
          // Calculer le nombre total de bouteilles vendues
          const quantiteVendue = vente.quantite[i];
          if (!bouteillesVendues[produit]) {
            bouteillesVendues[produit] = 0;
          }
          bouteillesVendues[produit] += quantiteVendue;

          // Diviser les ventes en fonction des semaines
          const dateVente = new Date(vente.createdAt);
          const semaineVente = moment(dateVente).isoWeek();

          if (semaineVente === moment(startOfMonth).isoWeek()) {
            semaineVentes.semaine1 += prixTotal;
            semaineBenefice.semaine1 += quantiteVendue * beneficeParBouteille;
          } else if (
            semaineVente === moment(startOfMonth).add(1, "week").isoWeek()
          ) {
            semaineVentes.semaine2 += prixTotal;
            semaineBenefice.semaine2 += quantiteVendue * beneficeParBouteille;
          } else if (
            semaineVente === moment(startOfMonth).add(2, "week").isoWeek()
          ) {
            semaineVentes.semaine3 += prixTotal;
            semaineBenefice.semaine3 += quantiteVendue * beneficeParBouteille;
          } else {
            semaineVentes.semaine4 += prixTotal;
            semaineBenefice.semaine4 += quantiteVendue * beneficeParBouteille;
          }

          // Calculer le bÃ©nÃ©fice total
          const beneficeVente = quantiteVendue * beneficeParBouteille;
          totalBenefice += beneficeVente;
        });
      });

      // console.log('Ventes par semaine:', semaineVentes);
      // console.log('BÃ©nÃ©fice par semaine:', semaineBenefice);
      // console.log('Total des ventes:', totalPrix);
      // console.log('Total du bÃ©nÃ©fice:', totalBenefice);
      let data = {
        semaineVentes,
        semaineBenefice,
        totalPrix,
        totalBenefice,
      };
      socket.emit("saved", data);
    } else {
      socket.emit("bad");
    }
  });

  socket.on("paiementdataDB", async (data) => {
    console.log(data, "data");
    // const Result = await paiementQueries.setPaiement(data);
    // if(Result){
    //   socket.emit('paymentsaved')
    // }else{
    //   socket.emit('paymentbad');
    // }
  });
});

const SaveConfigData = io.of("/config_profil").use(Serveur.getSharedSession());
SaveConfigData.on("connection", (socket) => {
  socket.on("configData", async (data) => {
    console.log("ğŸ‘‰ ğŸ‘‰ ğŸ‘‰  ~ file: www:326 ~ data:", data);
    const {
      userid,
      objectifJournalier,
      RemboursementType,
      pays,
      ville,
      square,
      othersquare,
    } = data;

    console.log(data);
    // DÃ©marrez une session MongoDB
    // const session = await mongoose.startSession();

    try {
      // await session.startTransaction();

      // Mettre Ã  jour l'utilisateur
      const updatedUser = await User.findByIdAndUpdate(
        userid,
        {
          country: pays,
          city: ville,
          square: square,
          othersquare: othersquare,
        },
        { new: true, upsert: true }
      );

      // Mettre Ã  jour le modÃ¨le de configuration
      const updatedSetting = await Setting.findOneAndUpdate(
        { travail_pour: userid },
        {
          objective: objectifJournalier,
          product_return_type: RemboursementType,
        },
        { new: true, upsert: true }
      );

      // ExÃ©cutez les deux opÃ©rations de mise Ã  jour en parallÃ¨le
      // const [updatedUser, updatedSetting] = await Promise.all([updateUserPromise, updateSettingPromise]);

      // await session.commitTransaction();

      socket.emit("configsuccess", "/config_profil");
    } catch (error) {
      socket.emit("bad");
      // await session.abortTransaction();
    } finally {
      // session.endSession();
    }
  });
});

const SaveProfile = io.of("/profile").use(Serveur.getSharedSession());
SaveProfile.on("connection", (socket) => {
  socket.on("dashredirect", async () => {
    socket.emit("finalRedict");
  });
});

server.listen(port, console.log(" le serveur ecoute sur le port", port));
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
